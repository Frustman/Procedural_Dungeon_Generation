// 2021-07-20 00:23:10
#event properties (no comments/etc. here are saved)
parent_index = -1;
sprite_index = Spr_chr;
mask_index = Spr_chr_msk;
uses_physics = false;

#event create
moveSpeed = 4 * global.timeScale;
dashSpeed = 2 * global.timeScale;

hand_x = 1.0;

charge = 0;

god = false;

justdodge = false;

shootX = x;
shootY = y;


state = "idle";
dash = false;
dashDir = 90;
shoot = false;
reload = false;
hit = false;

charging = false;

bullet_delay = Obj_valueContainer.player_attackdelay;

angle = 0;
TargetAngle = 0;

LookRight = 1;

fireshot = true;

anim_maxIndex = image_number;
anim_index = 0;
anim_fps = 10;


gun_index = 0;
gun_reac_duration = 15;
channel_gun = animcurve_get_channel(ac_gun_reaction, 0);

footstep = true;

dx = 0;
dy = 0;

Scr_update_depth(x,y);

AttackTarget = noone;

ray_map = -1;

with(Obj_camera){
	event_perform(ev_other,ev_user0);	
}

Scr_alarm_init();


#event alarm0 dash = false, speed -> back
// You can write your code in this editor
dash = false;
dashSpeed = 3;

//global.timeScale = 1.0;
Obj_camera.targetTimeScale = 1;

#event alarm1 state -> idle, shoot = false
// You can write your code in this editor
state = "idle";
shoot = false;

#event alarm2 footstep
// You can write your code in this editor
footstep = true;

#event alarm3 reload
// You can write your code in this editor
with(Obj_bullet_ui){
	event_perform(ev_other,ev_user1);
}
Alarm[4] = 10;
audio_play_sound(M4_Reload,0,false);

#event alarm4 reload = false
// You can write your code in this editor
reload = false;

#event alarm5 hit = false;
// You can write your code in this editor
hit = false;
Alarm[7] = 5;

#event alarm6 god = false
// You can write your code in this editor
god = false;

#event alarm7 god = false
// You can write your code in this editor

if(god){
	image_alpha = ! image_alpha;
	Alarm[7] = 5;
} else {
	image_alpha = 1.0;	
}


#event alarm8 Insert description here
// You can write your code in this editor
	Scr_sleep(150);


#event alarm9 Insert description here
// You can write your code in this editor
justdodge = false;
mask_index = Spr_chr_msk;

#event step
image_xscale = sign(image_xscale) * 1.0;
image_yscale = 1.0;


if(!dash){
	if(instance_exists(Obj_controller)){
		dx = lengthdir_x(moveSpeed* (Obj_controller.distanceBox / Obj_controller.boxRadius / 10 * 0.3 + 0.7),Obj_controller.directionBox);
		dy = lengthdir_y(moveSpeed* (Obj_controller.distanceBox / Obj_controller.boxRadius / 10 * 0.3 + 0.7),Obj_controller.directionBox);
	} else{
		dx = 0;
		dy = 0;
	}
} else{
	dx = lengthdir_x(dashSpeed,dashDir);
	dy = lengthdir_y(dashSpeed,dashDir);
}

/*EnemyCount = instance_number(Obj_enemy);
if(EnemyCount > 0){
	ds_priority_clear(enemy_pr);
	with(Obj_enemy){
		ds_priority_add(other.enemy_pr,id,point_distance(x,y,other.x,other.y));
	}
	canTarget = true;
	_target = noone;
	AttackTarget = noone;
	while(canTarget && !ds_priority_empty(enemy_pr)){
		_target = ds_priority_delete_min(enemy_pr);
		if(collision_line(x,y + 8,_target.x,_target.y,Obj_wall,false,false) == noone){
			canTarget = false;
			AttackTarget = _target;
		}
	}
	if(AttackTarget == noone){
		AttackTarget = instance_nearest(x,y,Obj_enemy);
	}
} else {
	AttackTarget = noone;
}
if(AttackTarget != noone && Scr_get_room_pos(AttackTarget.x, AttackTarget.y) != Scr_get_room_pos(x,y)){
	AttackTarget = noone;
}

ds_list_clear(shoot_list);
ds_list_clear(wall_list);*/

angle = Obj_controller.AttackDirection;

/*if(AttackTarget != noone && instance_exists(AttackTarget)){
	angle = point_direction(x,y,AttackTarget.x, AttackTarget.y) + random(5) - 2.5;	
} else{
	angle = Obj_controller.directionBox + random(5) - 2.5;
}*/


anim_maxIndex = image_number;

if(anim_index < (anim_maxIndex) * anim_fps){
	anim_index += global.timeScale;
} else{
	anim_index = 0;
}

if(dash){
	dashSpeed -= 0.3 * global.timeScale;
	if(dashSpeed < 0) dashSpeed = 0;
	if(random(1) < 0.4){
		instance_create_layer(x,y+8,"sort_end",Obj_dust);
	}
	Scr_force_update([dx * global.timeScale,dy * global.timeScale]);
}

if(sign(dx) > 0){
	image_xscale = 1.0;
	LookRight = 1;
}
else if(sign(dx) < 0){
	image_xscale = -1.0;
	LookRight = 0;
}

if(Obj_controller.move){
	state = "move";
	if(!dash) Scr_force_update([dx * global.timeScale,dy * global.timeScale]);
} else{
	state = "idle";
}


Scr_alarm_step();

#event step_end Insert description here
// You can write your code in this editor
if(abs(floor(y) - floor(yprevious)) >= 1){
	Scr_update_depth(x,y + 20);
}

#event collision:Obj_projectile Insert description here
// You can write your code in this editor
if(god == false && justdodge = false && dash == false){
	hit = true;
	anim_index = 2;	
	//Scr_shake(0.3,0.2,2,30);
	var fx = lengthdir_x(3,other.image_angle);
	var fy = lengthdir_y(3,other.image_angle);
	Scr_force_update([fx,fy]);
	if(Obj_valueContainer.player_shield > 0){
		Obj_valueContainer.player_shield--;
		with(Obj_valueContainer){
			Alarm[0] = player_shieldregen;	
		}
	} else Obj_valueContainer.player_heart--;
	god = true;
	Alarm[8] = 1;
	Alarm[5] = 25;
	Alarm[6] = 120;
}
if(justdodge == true){
	Scr_shake(0,0.5,0,62);
	Obj_camera.targetTimeScale = 0.2;	
	CONTAINER.game_surface_blur = true;
	with(Obj_bloom_shader){
		var new_wave = ds_list_create();
		new_wave[|waveparam.xx]		= other.x;
		new_wave[|waveparam.yy]		= other.bbox_bottom;
		new_wave[|waveparam.age]	= 0;
		new_wave[|waveparam.scale]	= 0;
		new_wave[|waveparam.alpha]	= 0.5;
		new_wave[|waveparam.life]	= 1;
		new_wave[|waveparam.maxScale]	= 1;

		ds_list_add(list_of_waves, new_wave);
	}
}

#event collision:Obj_enemy_attackmsk Insert description here
// You can write your code in this editor
if(god == false && justdodge = false && dash == false){
	hit = true;
	anim_index = 2;	
	//Scr_shake(0.3,0.2,2,30);
	var fx = lengthdir_x(3,other.image_angle);
	var fy = lengthdir_y(3,other.image_angle);
	Scr_force_update([fx,fy]);
	if(Obj_valueContainer.player_shield > 0){
		Obj_valueContainer.player_shield--;
		with(Obj_valueContainer){
			Alarm[0] = player_shieldregen;	
		}
	} else Obj_valueContainer.player_heart--;
	god = true;
	Alarm[8] = 1;
	Alarm[5] = 25;
	Alarm[6] = 120;
}
if(god == false && justdodge == true){
	Scr_shake(0,0.5,0,62);
	Obj_camera.targetTimeScale = 0.2;	
	CONTAINER.game_surface_blur = true;
	with(Obj_bloom_shader){
		var new_wave = ds_list_create();
		new_wave[|waveparam.xx]		= other.x;
		new_wave[|waveparam.yy]		= other.bbox_bottom;
		new_wave[|waveparam.age]	= 0;
		new_wave[|waveparam.scale]	= 0;
		new_wave[|waveparam.alpha]	= 0.5;
		new_wave[|waveparam.life]	= 1;
		new_wave[|waveparam.maxScale]	= 1;

		ds_list_add(list_of_waves, new_wave);
	}
}

#event other_user0 Insert description here
// You can write your code in this editor
if(CONTAINER.bullet_count > 0 && !reload){
	//Scr_shake(0.9,0.2,5,0.7,0.45,0.8);
	audio_play_sound(Pistol_Shot_02,0,false);
	//instance_create_layer(shootX,shootY, "sort_end", Obj_Catridge);
	shoot = true;
	Alarm[1] = 20;
	
	AttackTarget = Scr_interpolate_aim(x,y,angle);
	gun_index = 0;
	TargetAngle = angle;
	var _angle = angle;
	
	if(AttackTarget == noone){
		if(sign(image_xscale) > 0){
			shootX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
			chargeX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
		} else{
			shootX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
			chargeX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
		}
		if(sign(image_xscale) > 0){
			shootY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
			chargeY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
		} else{
			shootY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
			chargeY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
		}
	} else if(AttackTarget != noone && instance_exists(AttackTarget)){
		if(x < AttackTarget.x){
			shootX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
			chargeX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
		} else{
			shootX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
			chargeX = x + lengthdir_x(38,angle) + lengthdir_x(-7,angle + 90);
		}
		if(x < AttackTarget.x){
			shootY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
			chargeY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
		} else{
			shootY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
			chargeY = y + lengthdir_y(38,angle) + lengthdir_y(-7,angle + 90);
		}
		TargetAngle = point_direction(shootX,shootY,AttackTarget.x,AttackTarget.y);
	}
	
	
	var bullet = instance_create_layer(chargeX,chargeY,"sort_end",Obj_charge_bullet);
	with(bullet){
		image_xscale = 0.5 + other.charge / 100 * 0.5;
		image_yscale = 0.5 + other.charge / 100 * 0.5;
		damage = floor(other.charge / 100 * CONTAINER.player_chargeMaxDamage);
		dir = _angle;
		spd = 7;
		motion_set(dir,spd * global.timeScale);
		image_angle = _angle;
	
		chainDamage = CONTAINER.player_chainDamage;
		chain_lightning = CONTAINER.player_chain;
		critical_chance = CONTAINER.critical_chance;
	
		par = other.id;	
	
		fireshot = CONTAINER.player_fireshot;
	
		target = other.AttackTarget;
		sharp_shooting = CONTAINER.player_sharpshooting;
		cusion_max = CONTAINER.sharp_cusionCount;
		cusion_dist = CONTAINER.sharp_distance;
	}
	CONTAINER.bullet_count--;
	with(global.bullet_ui[CONTAINER.bullet_count]){
		event_perform(ev_other,ev_user0);
	}
	if(CONTAINER.bullet_count == 0){
		reload = true;
		CONTAINER.bullet_count = CONTAINER.bullet_maxCount;
		Alarm[3] = 90;
	}
}

#event other_user1 Insert description here
// You can write your code in this editor
if(Obj_valueContainer.bullet_count > 0 && !reload){
	Scr_shake(5,0,6,15);
	audio_play_sound(Pistol_Shot_02,0,false);
	
	AttackTarget = Scr_interpolate_aim(x,y,angle);
	TargetAngle = angle;
	gun_index = 0;
	
	if(AttackTarget == noone){
		if(sign(image_xscale) > 0){
			shootX = x + lengthdir_x(20,angle + 90 - 79.215702132437);
			chargeX = x + lengthdir_x(30,angle + 90 - 79.215702132437);
		} else{
			shootX = x + lengthdir_x(20,angle - 90 + 79.215702132437);
			chargeX = x + lengthdir_x(30,angle - 90 + 79.215702132437);
		}
		if(sign(image_xscale) > 0){
			shootY = y + lengthdir_y(20,angle + 90 - 79.215702132437);
			chargeY = y + lengthdir_y(30,angle + 90 - 79.215702132437);
		} else{
			shootY = y + lengthdir_y(20,angle - 90 + 79.215702132437);
			chargeY = y + lengthdir_y(30,angle - 90 + 79.215702132437);
		}
	} else if(AttackTarget != noone && instance_exists(AttackTarget)){
		if(x < AttackTarget.x){
			shootX = x + lengthdir_x(20,angle + 90 - 79.215702132437);
			chargeX = x + lengthdir_x(30,angle + 90 - 79.215702132437);
		} else{
			shootX = x + lengthdir_x(20,angle - 90 + 79.215702132437);
			chargeX = x + lengthdir_x(30,angle - 90 + 79.215702132437);
		}
		if(x < AttackTarget.x){
			shootY = y + lengthdir_y(20,angle + 90 - 79.215702132437);
			chargeY = y + lengthdir_y(30,angle + 90 - 79.215702132437);
		} else{
			shootY = y + lengthdir_y(20,angle - 90 + 79.215702132437);
			chargeY = y + lengthdir_y(30,angle - 90 + 79.215702132437);
		}
		shootX = x;
		shootY = y;
		TargetAngle = point_direction(shootX,shootY,AttackTarget.x,AttackTarget.y);
	}
	
	var _angle = TargetAngle + random_range(-1 * CONTAINER.player_recoil, CONTAINER.player_recoil);
	
	with(instance_create_layer(shootX,shootY, "sort_end", Obj_Catridge)){
		hspd = -sign(lengthdir_x(1,_angle)) * random(3);
	}
	shoot = true;
	Alarm[1] = 20;
	if(Obj_valueContainer.player_flameShot == true){
		with(instance_create_layer(x,y,"sort_end",Obj_flame_pen_eff)){
			damage = 5;
			par = other.id;
			dir = _angle;
			spd = 12 + random(1);
			motion_set(dir,spd * global.timeScale);
		}
	} else{
		var bullet = instance_create_layer(shootX,shootY,"sort_end",Obj_bullet_eff);
		with(bullet){
			damage = Obj_valueContainer.player_bulletDamage;
			dir = _angle;
			spd = 12 + random(1);
			motion_set(dir,spd * global.timeScale);
			image_angle = _angle;
	
			chainDamage = Obj_valueContainer.player_chainDamage;
			chain_lightning = Obj_valueContainer.player_chain;
			critical_chance = Obj_valueContainer.critical_chance;
	
			par = other.id;	
	
			fireshot = Obj_valueContainer.player_fireshot;
	
			target = other.AttackTarget;
			sharp_shooting = Obj_valueContainer.player_sharpshooting;
			cusion_max = Obj_valueContainer.sharp_cusionCount;
			cusion_dist = Obj_valueContainer.sharp_distance;
		}
	}
	var fx = lengthdir_x(1.5,_angle - 180);
	var fy = lengthdir_y(1.5,_angle - 180);
	Scr_force_update([fx,fy]);
	
	Obj_valueContainer.bullet_count--;
	with(global.bullet_ui[Obj_valueContainer.bullet_count]){
		event_perform(ev_other,ev_user0);
	}
	if(Obj_valueContainer.bullet_count == 0){
		reload = true;
		Obj_valueContainer.bullet_count = Obj_valueContainer.bullet_maxCount;
		Alarm[3] = 90;
	}
}

#event other_user2 Insert description here
// You can write your code in this editor

Alarm[0] = 47;
justdodge = true;
mask_index = Spr_chr_msk_just;
Alarm[9] = 5;

anim_index = 0;
dashDir = other.directionBox;
dashSpeed = 8;
dash = true;



#event draw Insert description here
// You can write your code in this editor
real_index = anim_index div anim_fps;
//draw_sprite(Spr_wallM,0,(x div 64) * 64, ((y + 8) div 64) * 64);
//shader_set(Sha_sepia);


if(AttackTarget == noone){
	TargetAngle = angle;	
}
if(shoot) hand_x = sign(lengthdir_x(1,TargetAngle));

image_xscale = (abs(image_xscale) > 0) ? image_xscale : 1.0;
hand_x = (abs(hand_x) > 0) ? hand_x : 1.0;

if(dash){
	sprite_index = Spr_chr_dash;
	anim_fps = 7;
	draw_sprite_ext(Spr_chr_dash,real_index,x,y,shoot ? hand_x : image_xscale,image_yscale,0,c_white,image_alpha);
}else{
	if(hit){
		anim_fps = 10;
		sprite_index = Spr_chr_hurt;
		draw_sprite_ext(Spr_chr_hurt,real_index,x,y,shoot ? hand_x : image_xscale,image_yscale,0,c_white,image_alpha);
	} else if(state == "idle"){
		sprite_index = Spr_chr;
		draw_sprite_ext(Spr_chr,real_index,x,y,shoot ? hand_x : image_xscale,image_yscale,0,c_white,image_alpha);
	} else if(state == "move"){
		anim_fps = 5;
		sprite_index = Spr_chr_move;
		draw_sprite_ext(Spr_chr_move,real_index,x,y,shoot ? hand_x : image_xscale,image_yscale,0,c_white,image_alpha);
	}
}

if(shoot){
	var gun_reac = -animcurve_channel_evaluate(channel_gun, gun_index / gun_reac_duration) * 4;
	gun_index += global.timeScale;
	var Gangle = (hand_x == 1.0) ? TargetAngle : TargetAngle  - 180;
	draw_sprite_ext(Spr_chr_hand,CONTAINER.player_guntype,x + lengthdir_x(gun_reac,Gangle),y + 8 + lengthdir_y(gun_reac, Gangle),hand_x,image_yscale,Gangle,c_white,image_alpha);
	if(gun_index <= 2) draw_sprite_ext(Spr_muzzle,irandom(3),x + lengthdir_x(gun_reac,Gangle),y + 8 + lengthdir_y(gun_reac, Gangle),hand_x,image_yscale,Gangle,c_white,image_alpha);
	
}
//draw_circle(x,y,3,false);

//shader_reset();
/*if(charging){
	anim_fps = 10;
	hand_x = sign(lengthdir_x(1,angle)) * 2.0;

	draw_sprite_ext(Spr_chr_hand,0,x,y,hand_x,image_yscale,(hand_x == 2.0) ? angle : angle - 180,c_white,1.0);
} */

#event keypress:vk_space Insert description here
// You can write your code in this editor
event_perform(ev_other,ev_user1);