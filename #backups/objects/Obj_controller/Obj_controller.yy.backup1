// 2021-07-20 00:03:08
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create Insert description here
// You can write your code in this editor

boxCenterX = 160;
boxCenterY = deviceHeight - 256;
boxRadius = 128;

AttackCenterX = deviceWidth - 160;
AttackCenterY = deviceHeight - 256;
AttackX = deviceWidth - 216;
AttackY = deviceHeight - 256;
AttackRadius = 160;

dashCenterX = AttackCenterX + 90;
dashCenterY = AttackCenterY - 160;
dashRadius = 32;


for(var i = 0; i < 12; i++){
	Alarm[i] = ALARMINACTIVE;
}

attack = false;

infoCenterX = deviceWidth - 64;
infoCenterY = 64;
infoRadius = 32;

joyIndex = -1;
attackIndex = -1;

clickOne = false;
clickTwo = false;

chargeMax = 100;
charge = 0;

AttackDirection = 90;
AttackDistance = 0;

directionBox = 90;
distanceBox = 0;

move = false;
keypress = false;

can_attack = true;
can_info = true;
can_dash = true;

dash_delay = 47;

device_press_x[0] = 0;
device_press_x[1] = 0;
device_press_y[0] = 0;
device_press_y[1] = 0;

/*globalvar path_grid;
path_grid = mp_grid_create(0,0,room_width / CELL_WIDTH, room_height / CELL_HEIGHT,CELL_WIDTH,CELL_HEIGHT);
mp_grid_add_instances(path_grid, Obj_wall, false);*/

#event alarm0 Insert description here
// You can write your code in this editor

can_attack = true;

#event alarm1 Insert description here
// You can write your code in this editor

can_dash = true;

#event alarm2 Insert description here
// You can write your code in this editor

can_info = true;

#event step Insert description here
// You can write your code in this editor
clickOne = device_mouse_check_button(0, mb_left);
clickTwo = device_mouse_check_button(1, mb_left);

device_x[0] = device_mouse_x_to_gui(0);
device_y[0] = device_mouse_y_to_gui(0);
device_x[1] = device_mouse_x_to_gui(1);
device_y[1] = device_mouse_y_to_gui(1);


if(clickOne && device_mouse_x_to_gui(0) <= view_wport[0] / 2){
	if(joyIndex != 0){
		device_press_x[0] = device_mouse_x_to_gui(0);
		device_press_y[0] = device_mouse_y_to_gui(0);
	}
	joyIndex = 0;
	move = true;
} else if(clickTwo && device_mouse_x_to_gui(1) <= view_wport[0] / 2){
	if(joyIndex != 1){
		device_press_x[1] = device_mouse_x_to_gui(1);
		device_press_y[1] = device_mouse_y_to_gui(1);
	}
	joyIndex = 1;
	move = true;
} else if(!keypress){
	joyIndex = -1;
	device_press_x[0] = 0;
	device_press_y[0] = 0;
	device_press_x[1] = 0;
	device_press_y[1] = 0
	boxCenterX = 160;
	boxCenterY = deviceHeight - 256;
	distanceBox = 0;
	move = false;
}


attack = false;

if(clickOne && clickTwo){
	if(joyIndex != -1){
		if(point_distance(AttackCenterX, AttackCenterY, device_x[!joyIndex], device_y[!joyIndex]) <= AttackRadius){
			attackIndex = !joyIndex;
		}
		if(point_distance(dashCenterX, dashCenterY, device_x[!joyIndex], device_y[!joyIndex]) <= dashRadius){
			if(can_dash && !Obj_chr.shoot){
				with(Obj_chr){
					event_perform(ev_other,ev_user2);
				}
				can_dash = false;
				Alarm[1] = dash_delay;
			}
		}
		if(point_distance(dashCenterX, dashCenterY, device_x[!joyIndex], device_y[!joyIndex]) <= dashRadius){
			if(can_dash && !Obj_chr.shoot){
				with(Obj_chr){
					event_perform(ev_other,ev_user2);
				}
				can_dash = false;
				Alarm[1] = dash_delay;
			}
		}
		if(point_distance(infoCenterX, infoCenterY, device_x[!joyIndex], device_y[!joyIndex]) <= infoRadius){
			if(can_info){
				with(Obj_pause){
					event_perform(ev_other,ev_user0);
				}
				can_info = false;
				Alarm[2] = 5;
			}
		}
	} else{
		for(var i = 0; i < 2; i++){
			if(point_distance(AttackCenterX, AttackCenterY, device_x[i], device_y[i]) <= AttackRadius){
				attackIndex = i;
			}
			if(point_distance(dashCenterX, dashCenterY, device_x[i], device_y[i]) <= dashRadius){
				if(can_dash && !Obj_chr.shoot){
					with(Obj_chr){
						event_perform(ev_other,ev_user2);
					}
					can_dash = false;
					Alarm[1] = dash_delay;
				}
			}
			if(point_distance(infoCenterX, infoCenterY, device_x[i], device_y[i]) <= infoRadius){
				if(can_info){
					with(Obj_pause){
						event_perform(ev_other,ev_user0);
					}
					can_info = false;
					Alarm[2] = 5;
				}
			}
		}
	}
} 
if(clickOne){
	if(joyIndex == -1 && device_x[0] >= view_wport[0] / 2){
		if(point_distance(AttackCenterX, AttackCenterY, device_x[0], device_y[0]) <= AttackRadius){
			attackIndex = 0;
		}
		if(point_distance(dashCenterX, dashCenterY, device_x[0], device_y[0]) <= dashRadius){
			if(can_dash && !Obj_chr.shoot){
				with(Obj_chr){
					event_perform(ev_other,ev_user2);
				}
				can_dash = false;
				Alarm[1] = dash_delay;
			}
		}
		if(point_distance(infoCenterX, infoCenterY, device_x[0], device_y[0]) <= infoRadius){
			if(can_info){
				with(Obj_pause){
					event_perform(ev_other,ev_user0);
				}
				can_info = false;
				Alarm[2] = 5;
			}
		}
	}
}
if(attackIndex != -1){
	if(device_x[attackIndex] >= view_wport[0] / 2){
		if(!Obj_valueContainer.player_charge){
			AttackDirection = point_direction(AttackCenterX,AttackCenterY,device_x[attackIndex],device_y[attackIndex]);
			AttackDistance = point_distance(AttackCenterX,AttackCenterY,device_x[attackIndex],device_y[attackIndex]);
			Obj_chr.angle = AttackDirection;
			Obj_weapon.bullet_dir = AttackDirection;
			if(can_attack){
				with(Obj_chr){
					event_perform(ev_other,ev_user1);
					other.Alarm[0] = CONTAINER.player_attackdelay;
				}
				can_attack = false;
			}
		} else {
			if(!instance_exists(Obj_charging_eff))
				instance_create_layer(Obj_chr.x,Obj_chr.y,"sort_start",Obj_charging_eff);
			AttackDirection = point_direction(AttackCenterX,AttackCenterY,device_x[attackIndex],device_y[attackIndex]);
			AttackDistance = point_distance(AttackCenterX,AttackCenterY,device_x[attackIndex],device_y[attackIndex]);
			Obj_chr.angle = AttackDirection;
			Obj_weapon.bullet_dir = AttackDirection;
			Obj_chr.charging = true;
			with(Obj_chr){
				AttackTarget = Scr_interpolate_aim(x,y,other.AttackDirection);	
			}
			charge++;
			if(charge >= chargeMax){
				charge = chargeMax;	
			}
		}
	} else {
		attackIndex = -1;
	}
}

if(attackIndex != -1 && device_mouse_check_button_released(attackIndex, mb_left)){
	if(Obj_valueContainer.player_charge){
		instance_destroy(Obj_charging_eff);
		Obj_chr.charging = false;
		Obj_chr.charge = charge;
		with(Obj_chr){
			event_perform(ev_other,ev_user0);	
		}
		charge = 1;
	}
	attackIndex = -1;
}

if(attackIndex == -1){
	AttackDistance = 0;
}

if(joyIndex != -1){
	if(device_mouse_check_button(joyIndex, mb_left)){
		boxCenterX = device_press_x[joyIndex];
		boxCenterY = device_press_y[joyIndex];
		distanceBox = point_distance(boxCenterX, boxCenterY, device_mouse_x_to_gui(joyIndex), device_mouse_y_to_gui(joyIndex));
		directionBox = point_direction(boxCenterX, boxCenterY, device_mouse_x_to_gui(joyIndex), device_mouse_y_to_gui(joyIndex));
	}
}

Scr_alarm_step();

#event keyboard:vk_anykey Insert description here
// You can write your code in this editor
keypress = true;

#event keyboard:A Insert description here
// You can write your code in this editor

if(keyboard_check(ord("W"))){
	directionBox = 135;
}
else if(keyboard_check(ord("S"))){
	directionBox = 225;
}
else{
	directionBox = 180;
}
move = true;

#event keyboard:D Insert description here
// You can write your code in this editor

if(keyboard_check(ord("W"))){
	directionBox = 45;
}
else if(keyboard_check(ord("S"))){
	directionBox = 315;
}
else{
	directionBox = 0;
}
move = true;

#event keyboard:S Insert description here
// You can write your code in this editor

if(!keyboard_check(ord("A")) && !keyboard_check(ord("D")))
	directionBox = 270;
move = true;

#event keyboard:W Insert description here
// You can write your code in this editor

if(!keyboard_check(ord("A")) && !keyboard_check(ord("D")))
	directionBox = 90;
move = true;

#event mouse_global_left_press Insert description here
// You can write your code in this editor

#event draw_gui Insert description here
// You can write your code in this editor

draw_sprite_ext(Spr_controlBox, 0, boxCenterX, boxCenterY,4.0,4.0,0,c_white,1);

draw_sprite(Spr_info, 0, infoCenterX, infoCenterY);
draw_sprite(Spr_DashBox, 0, dashCenterX, dashCenterY);
draw_sprite_ext(Spr_controlBox, 0, AttackCenterX, AttackCenterY,4.0,4.0,0,c_white,1);

draw_sprite_ext(Spr_controller, 0, boxCenterX + lengthdir_x(min(distanceBox, boxRadius), directionBox), boxCenterY + lengthdir_y(min(distanceBox, boxRadius), directionBox),4.0,4.0,0,c_white,1);
draw_sprite_ext(Spr_Attack, 0, AttackCenterX + lengthdir_x(min(AttackDistance, AttackRadius), AttackDirection), AttackCenterY + lengthdir_y(min(AttackDistance, AttackRadius), AttackDirection),4.0,4.0,0,c_white,1);


#event keypress:vk_control Insert description here
// You can write your code in this editor
with(Obj_chr){
	event_perform(ev_other,ev_user2);
}

#event keyrelease:vk_anykey Insert description here
// You can write your code in this editor
move = false;
keypress = false;